[toplevel]

whoami =
  !f() {
    aws sts get-caller-identity
  }; f

list-sg-rules =
  !f() {
    aws --output text ec2 describe-security-groups --group-id "$1" --query "SecurityGroups[].IpPermissions[].[FromPort, ToPort, IpProtocol, join(',', IpRanges[].CidrIp)]"
  }; f

list-sgs =
  !f() {
    aws --output text ec2 describe-security-groups --query "SecurityGroups[].[GroupId, GroupName]"
  }; f

list-roles =
  !f() {
    aws --output text iam list-roles --query "Roles[].[RoleId,RoleName]"
  }; f

list-instances =
  !f() {
    aws --output text ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId, Tags[?Key==`Name`].Value | [0], InstanceType]'
  }; f

list-ebs =
  !f() {
    aws --output text ec2 describe-volumes --query 'Volumes[].[VolumeId, Tags[?Key==`Name`].Value | [0], State, Size, AvailabilityZone]'
  }; f

list-amis =
  !f() {
    aws --output text ec2 describe-images --owners self --query "Images[*].[ImageId, Name]" | sort -k 2
  }; f

list-vpcs =
  !f() {
    aws --output text ec2 describe-vpcs --query 'Vpcs[].[VpcId, Tags[?Key==`Name`].Value | [0], CidrBlock, State]' --filters "Name=isDefault,Values=false"
  }; f

list-bucket =
  !f() {
    aws s3 ls s3://${1} --recursive --human-readable --summarize
  }; f

list-cfts =
  !f() {
    aws --output text cloudformation describe-stacks --query "Stacks[*].[StackName, CreationTime]" | sort -k 1,1 -nr
  }; f

show-prefix =
  !f() {
    aws --output text ec2 describe-prefix-lists --query "PrefixLists[].[PrefixListId, PrefixListName, join(',', Cidrs[])]"  }; f
