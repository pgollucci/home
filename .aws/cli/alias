[toplevel]

whoami =
  !f() {
    aws sts get-caller-identity
  }; f

list-sg-rules =
  !f() {
    sg_show.pl --security-group-id "$1"
  }; f

list-sgs =
  !f() {
    aws --output text ec2 describe-security-groups --query "SecurityGroups[].[GroupId, GroupName]"
  }; f

list-roles =
  !f() {
    aws --output text iam list-roles --query "Roles[].[RoleId,RoleName,Arn]"
  }; f

list-caches =
  !f() {
     aws --output text elasticache describe-cache-clusters --query "CacheClusters[].[CacheClusterStatus, PreferredAvailabilityZone, CacheNodeType, EngineVersion, Engine, CacheSubnetGroupName, ConfigurationEndpoint.Address]"
  }; f

list-elbs =
  !f() {
    aws --output text elb describe-load-balancers --query "LoadBalancerDescriptions[].[Scheme, LoadBalancerName, join(',', Subnets[]), join(',', AvailabilityZones[]), join(',', SecurityGroups[]), join(',',Instances[].InstanceId)]"
  }; f

list-asgs =
  !f() {
    aws --output text autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[].[LoadBalancerNames[0], MinSize, MaxSize, DesiredCapacity, join(',', AvailabilityZones[]), AutoScalingGroupName]"
  }; f

list-asg-act =
  !f() {
    aws --output text autoscaling describe-scaling-activities --query "Activities[].[StatusCode, Description, Details, AutoScalingGroupName]"
  }; f

list-instances =
  !f() {
    aws --output text ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId, ImageId, InstanceType, SubnetId, Placement.AvailabilityZone, NetworkInterfaces[0].PrivateIpAddress, KeyName, Tags[?Key==`Name`].Value | [0], IamInstanceProfile.Arn]'
  }; f

list-ebs =
  !f() {
    aws --output text ec2 describe-volumes --query 'Volumes[].[VolumeId, Tags[?Key==`Name`].Value | [0], State, Size, AvailabilityZone]'
  }; f

list-amis =
  !f() {
    aws --output text ec2 describe-images --owners self --query "Images[*].[ImageId, Name]" | sort -k 2
  }; f

list-vpcs =
  !f() {
    aws --output text ec2 describe-vpcs --query 'Vpcs[].[VpcId, Tags[?Key==`Name`].Value | [0], CidrBlock, State]' --filters "Name=isDefault,Values=false"
  }; f

list-subnets =
  !f() {
    aws --output text ec2 describe-subnets --filters Name=vpc-id,Values=vpc-3e8c7158 --query 'Subnets[].[SubnetId, AvailabilityZone, CidrBlock, AvailableIpAddressCount, Tags[?Key==`Name`].Value | [0]]'
  }; f

bucket-policy =
  !f() {
    aws --output text s3api get-bucket-policy --bucket ${1} | python -mjson.tool
  }; f

list-bucket =
  !f() {
    aws s3 ls s3://${1} --recursive --human-readable --summarize
  }; f

poll-last-cft =
  !f() {
    local stack_name=$(aws list-cfts | awk -v k=$USER '/_IN_/ {print $3}' | head -1)
    if [ -n "$stack_name" ]; then
	  aws list-cft-events $stack_name
    fi
  }; f

list-cft-events =
  !f() {
    local done=
    while [ -z "$done" ]; do
	echo "=====> `date`"
	aws --output text cloudformation describe-stack-events --stack-name $1 --query "StackEvents[].[ResourceStatus, ResourceType, PhysicalResourceId]"

	local output=$(aws --output text cloudformation describe-stack-events --stack-name $1 --query "StackEvents[].[ResourceStatus, ResourceType, PhysicalResourceId]")
	done=$(echo $output | grep "^CREATE_COMPLETE AWS::CloudFormation::Stack")
	sleep 5
    done
  }; f

list-cfts =
  !f() {
    aws --output text cloudformation describe-stacks --query "Stacks[*].[CreationTime, StackStatus, StackName]" | sort -k 1,1 -nr
  }; f

list-rdss =
  !f() {
    aws --output text rds describe-db-instances --query "DBInstances[].[DBInstanceClass, AvailabilityZone, MultiAZ, EngineVersion, DBInstanceStatus, join(',', DBSubnetGroup.Subnets[].SubnetIdentifier), join(',', DBSubnetGroup.Subnets[].SubnetAvailabilityZone.Name), Engine, DBParameterGroups[0].DBParameterGroupName, OptionGroupMemberships[0].OptionGroupName, DBInstanceIdentifier]"
  }; f

list-rds-snapshots =
  !f() {
    aws --output text rds describe-db-snapshots --query "DBSnapshots[].[VpcId, SnapshotCreateTime, AvailabilityZone, SnapshotType, Engine, EngineVersion, DBSnapshotIdentifier]"
  }; f

show-prefix =
  !f() {
    aws --output text ec2 describe-prefix-lists --query "PrefixLists[].[PrefixListId, PrefixListName, join(',', Cidrs[])]"
  }; f
